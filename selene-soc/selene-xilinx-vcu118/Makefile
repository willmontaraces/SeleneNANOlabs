#ifeq ("$(GRLIB)","")
GRLIB=$(PWD)/../../grlib
#endif

RTL=../rtl
CLEAN=soft-clean unpatch_selene

XDCPATH=../../grlib
# Hack to autogenerate empty files whenever any make target is called, this is needed as
# a replacement to the previous GRLIB implemented target
GENERATE_INTERMEDIATE_FILES:=$(shell bash ../../interconnect/scripts/touchAutogenerated.sh)


############  Board Setup  ########################

### Xilinx Vivado device and board setup
BOARD=xilinx-vcu118-xcvu9p
DESIGN=noelv-xilinx-vcu118
include $(XDCPATH)/boards/$(BOARD)/Makefile.inc
DEVICE=$(PART)-$(PACKAGE)-$(SPEED)
XDC=$(XDCPATH)/boards/$(BOARD)/$(BOARD).xdc
GRLIB_CONFIG=grlib_config.vhd


# Definition of the following variables generates SGMII and MIG xilinx IP output source files
# Do not alter these
CONFIG_GRETH_ENABLE=y
CONFIG_MIG_7SERIES=y

#######  Simulation : user configuration  #########
# Comment out the following line to simulate MIG IP. Else, an AXI memory will be generated in simulation
# The default case is an AXI memory connected to the backend of L2C/ahb2axib bridge. 
#Note: Refer README file for simulation steps, if the following line is COMMENTED OUT.
CONFIG_MIG_7SERIES_MODEL=y


# Setting the following variable to 'y' allows simulation of xilinx sgmii IP. UNCOMMENT in need.
# The default case is sgmii IP is not compiled during simulation
#Note: Execute 'make comp_sgmii' before make 'vsim-launch' if the following line is uncommented
#SIM_SGMII=y
############  Project  #############################

### Simulation Options ###
# Design Top Level
TOP=selene_soc

# Simulation top level
SIMTOP=testbench

# Uncomment for Modelsim or change to specify your simulator
GRLIB_SIMULATOR=Questa
GRLIB_XIL_simlib_Simulator=questasim
#GRLIB_SIMULATOR=ModelSim

# Options used during compilation
VCOMOPT=-explicit -O0
VLOGOPT=-mixedsvvh
VHDLOPT=-mixedsvvh

# GRLIB Options
VSIMOPT= work.glbl -gdisas=1 -L secureip -L unisims_ver 

# GRETH options
ifeq ($(SIM_SGMII),y)
VSIMOPT+= -L gig_ethernet_pcs_pma_v16_1_9 -L gig_ethernet_pcs_pma_v16_2_1 -L gig_ethernet_pcs_pma -L xpm -gEXAMPLE_SIMULATION=1 
GRLIB_COMPILE_VIVADO_IP=y
endif

ifeq ($(CONFIG_MIG_7SERIES),y)
VIVADO_MIG_AXI=1
AXI_128=1
VSIMOPT+= -t 1ps
ifdef CONFIG_MIG_7SERIES_MODEL
VSIMOPT+= -gUSE_MIG_INTERFACE_MODEL=true
ASIMOPT+= -gUSE_MIG_INTERFACE_MODEL=true
else
VSIMOPT+=-L xpm -L microblaze_v11_0_2 -L mig_ip -L lib_cdc_v1_0_2 -L proc_sys_reset_v5_0_13 -L lmb_v10_v3_0_10 \
-L lmb_bram_if_cntlr_v4_0_17 -L blk_mem_gen_v8_4_4 -L iomodule_v3_1_5 -L axi_infrastructure_v1_1_0 -L fifo_generator_v13_2_5 \
-L axi_clock_converter_v2_1_19 -L mig_cdc_ip -L mem_model
VSIMOPT+= -gUSE_MIG_INTERFACE_MODEL=false -t ps
ASIMOPT+= -gUSE_MIG_INTERFACE_MODEL=false -t ps
endif
endif

VIVADO_IMPL_STRATEGY = Performance_SpreadSLLs

# Simulator switches
ifeq ("$(GRLIB_SIMULATOR)","ALDEC")
VSIMOPT+= +access +w -voptargs="+acc" +notimingchecks
else
VSIMOPT+= -voptargs="+acc -nowarn 1" +notimingchecks
endif

GRLIB_XILINX_SOURCE_MGMT_MODE=DisplayOnly

# Remove collision check in UNSIM library
VSIMOPT+= -GSIM_COLLISION_CHECK="GENERATE_X_ONLY"
ASIMOPT+= -GSIM_COLLISION_CHECK="GENERATE_X_ONLY"

# Simulation scripts
VSIMOPT+= -do $(GRLIB)/bin/runvsim.do
ASIMDO = run -all

# Toplevel
VSIMOPT+= $(SIMTOP)

### End of Simulation Options ###

### Synthesize Options ###

### End of Synthesize Options ###

### Testbench, design and libraries to compile and not to compile

VHDLSYNFILES=   $(RTL)/axi4/ahb2axi4b.vhd config.vhd $(RTL)/selene.vhd $(RTL)/ahbrom.vhd $(RTL)/noelvsys.vhd \
				$(RTL)/io_sys.vhd $(RTL)/mem_sys.vhd $(RTL)/gpp_sys.vhd $(RTL)/axi_mig4_7series.vhd $(RTL)/selene_core.vhd \
				$(RTL)/pads.vhd selene_soc.vhd $(RTL)/sgmii_vcu118.vhd $(MEMTECH)

VERILOGSYNFILES= $(XILINX_VIVADO)/data/verilog/src/glbl.v 

VHDLSIMFILES= $(RTL)/axi4/aximem.vhd testbench.vhd 

TECHLIBS = unisim
SKIP_SIM_TECHLIBS = 1


LIBSKIP = pci pci/pcif core1553bbc core1553brm srio core1553brt idt gr1553 corePCIF \
	tmtc openchip ihp gsi cypress hynix ge_1000baseX \
	spansion secureip usb ddr grdmac mmuconfig fmf esa micron spfi
DIRSKIP = b1553 pci gr1553b/core pci/pcif leon2 leon2ft srio idt crypto satcan pci \
	ascs slink irqmp grdmac grrm nand leon3v3 leon5 leon5v0 hcan can \
	pwm gr1553b ac97 secureip mmuiface clk2x i2c spi leon4v0 spacefibre ftaddr
DIRADD = noelv/pkg_64 noelv noelv/core noelv/subsys noelv/grfpunv

FILESKIP =  aximem.vhd ahb2axi4b.vhd grcan.vhd ddr2.v mobile_ddr.v adapters/sgmii.vhd \
			iu4.vhd noelvsys.vhd
EXTRALIBS=../..

### Software ###
OBJCOPY_OPTS = --srec-len=16 --srec-forceS3
XLEN ?= 64
#EXTRA_PROM = --reverse-bytes=8
UART = 0
RISCV_ARCH = rv$(XLEN)imafd
include $(GRLIB)/bin/Makefile
include $(GRLIB)/software/noelv/systest/Makefile

### Check HLSinf accelerator implementation ###
CFG_HLSINF_EN=$(shell awk -F\; '{print $1}' config.vhd | grep "CFG_HLSINF_EN" | grep -c '1')
HLSINF_EXISTS=$(shell ls ../../accelerators/conv/src/ | grep libraries$)

##################  project specific targets ##########################

### Simulation ###
fix_simulation:
	../../interconnect/scripts/preprocessInterconnect.sh SIMULATION
ifeq ($(CFG_HLSINF_EN), 1)
	@echo "HLSinf accelerator is not instanciated on simulation"
endif

patch_selene: patch_grlib

unpatch_selene: unpatch_grlib unpatch_ffi

patch_grlib:
	- patch --forward -d $(GRLIB)/.. -p1 -i selene-soc/rtl/GRLIB_patches/HWquota.patch;\
	patch --forward -d $(GRLIB)/.. -p1 -i selene-soc/rtl/GRLIB_patches/xlnx_vivado.patch;

unpatch_grlib:
	- patch --reverse --forward -d $(GRLIB)/.. -p1 -i selene-soc/rtl/GRLIB_patches/HWquota.patch;\
	patch --reverse --forward -d $(GRLIB)/.. -p1 -i selene-soc/rtl/GRLIB_patches/xlnx_vivado.patch;


patch_ffi:
	- patch --forward -d $(GRLIB)/.. -p1 -i selene-soc/rtl/GRLIB_patches/HWquota.patch;\
	patch --forward -d $(GRLIB)/.. -p1 -i selene-soc/rtl/GRLIB_patches/FFI.patch;

		
unpatch_ffi:
	- patch --reverse --forward -d $(GRLIB)/.. -p1 -i selene-soc/rtl/GRLIB_patches/HWquota.patch;\
	patch --reverse --forward -d $(GRLIB)/.. -p1 -i selene-soc/rtl/GRLIB_patches/FFI.patch;


selene-sim:
	make patch_selene; \
	make fix_simulation; \
#	make scripts-clean; \
#	make scripts; \
#	make install-unisim; \
#	make install-secureip; \
#	make install-unimacro; \
#	make map_xilinx_7series_lib; \
	make sim;

tb_sim:
	vlog -quiet -sv  -work work $(RTL)/bidi_feedthru.sv; \
	vlog -quiet -sv  -work work $(RTL)/ddr4_wrap.sv ; 

comp_sgmii: cp-xci-files
	make ip_7series_generate;\
	vivado -mode batch -source ./vivado/$(TOP)_vivado.tcl ;\
	vlog -work work $(XILINX_VIVADO)/data/verilog/src/glbl.v ;\
	vlib modelsim/gig_ethernet_pcs_pma ;\
	vmap -modelsimini ./modelsim.ini gig_ethernet_pcs_pma ./modelsim/gig_ethernet_pcs_pma ;\
	vlog -work gig_ethernet_pcs_pma ./vivado/noelv-xilinx-vcu118/noelv-xilinx-vcu118.gen/sources_1/ip/sgmii/synth/*.v; \
	vlog -work gig_ethernet_pcs_pma ./vivado/noelv-xilinx-vcu118/noelv-xilinx-vcu118.gen/sources_1/ip/sgmii/synth/*/*.v;\
	vlog -work gig_ethernet_pcs_pma ./vivado/noelv-xilinx-vcu118/noelv-xilinx-vcu118.gen/sources_1/ip/sgmii/hdl/gig_ethernet_pcs_pma_v16*.v;\
	vmap -modelsimini ./modelsim.ini gig_ethernet_pcs_pma_v16_1_9 ./xilinx_lib/gig_ethernet_pcs_pma_v16_1_9;\
	vmap -modelsimini ./modelsim.ini gig_ethernet_pcs_pma_v16_2_1 ./xilinx_lib/gig_ethernet_pcs_pma_v16_2_1;\
	vmap -modelsimini ./modelsim.ini xpm ./xilinx_lib/xpm;\
	vcom -work gig_ethernet_pcs_pma ./vivado/noelv-xilinx-vcu118/noelv-xilinx-vcu118.gen/sources_1/ip/sgmii/sgmii_NativePkg.vhd;\
	vcom -work gig_ethernet_pcs_pma ./vivado/noelv-xilinx-vcu118/noelv-xilinx-vcu118.gen/sources_1/ip/sgmii/sgmii_Rx_Nibble.vhd;\
	vcom -work gig_ethernet_pcs_pma ./vivado/noelv-xilinx-vcu118/noelv-xilinx-vcu118.gen/sources_1/ip/sgmii/sgmii_Tx_Nibble.vhd;\
	vcom -work gig_ethernet_pcs_pma ./vivado/noelv-xilinx-vcu118/noelv-xilinx-vcu118.gen/sources_1/ip/sgmii/sgmii_BaseX_Byte.vhd;\
	vcom -work gig_ethernet_pcs_pma ./vivado/noelv-xilinx-vcu118/noelv-xilinx-vcu118.gen/sources_1/ip/sgmii/synth/sgmii_Clock_Reset.vhd;

comp_mig:ip_7series_generate tb_sim comp_mem
	vsim -c -do selene_mig.do

comp_mem:
	@echo "Assumes DDR4 Memory Model is precompiled: Refer README for instructions";\
	rm -rf ./modelsim/mem_model; \
	mkdir ./modelsim/mem_model; \
	cp -f ./mem_model/* ./modelsim/mem_model/ ; \
	vmap -modelsimini ./modelsim.ini mem_model ./modelsim/mem_model ;


#### Synthesis ###
fix_vivado:
	../../interconnect/scripts/preprocessInterconnect.sh SYNTHESIS


create_accelerators:
ifeq ($(CFG_HLSINF_EN), 1)
ifneq ("$(HLSINF_EXISTS)","libraries")
	../../accelerators/hlsIntegrationTool/launch_vcu118_integration_HLSinf.sh 1
endif
endif	

cp-xci-files: create_accelerators scripts
	@echo "Overwriting board mig files with local files"
	cp ../../grlib/boards/xilinx-vcu118-xcvu9p/mig.xci ./vivado/mig.xci
	cp ../../grlib/boards/xilinx-vcu118-xcvu9p/mig_cdc.xci ./vivado/mig_cdc.xci
	cp ../../grlib/boards/xilinx-vcu118-xcvu9p/axi_pipe.xci ./vivado/axi_pipe.xci
	cp ../../grlib/boards/xilinx-vcu118-xcvu9p/sgmii.xci ./vivado/sgmii.xci
	tclsh import_acc.tcl

    
selene-vivado: patch_selene cp-xci-files
	make fix_vivado;\
	make vivado;

selene-vivado-launch: patch_selene cp-xci-files
	make fix_vivado;\
	make vivado-launch;

selene-vivado-ffi: patch_ffi cp-xci-files
	make fix_vivado;\
	make vivado;
        
selene-vivado-launch-ffi: patch_ffi cp-xci-files
	make fix_vivado;\
	make vivado-launch;


### Programming FPGA ###
prog-fpga:
	$(VIVADO_LAB) -mode batch -source doprog.tcl 

prog-flash:
	$(VIVADO_LAB) -mode batch -source doprog_spi.tcl 

VIVADO_LAB = vivado
# Use make command below to use Vivado Lab
# make VIVADO_LAB=vivado_lab
