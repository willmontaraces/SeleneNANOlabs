SELENE Virtex UltraScale Plus VCU118 board Design 
###########################################################################################################

Information on the VCU118 at:

https://www.xilinx.com/products/boards-and-kits/vcu118.html

----------------------------------------------------------
The design has been tested with the following tools:

- Mentor questasim 2021.3
- Vivado 2020.2
- The latest grmon version (both pro and eval) available at Cobham Gaisler website : 
https://www.gaisler.com/index.php/downloads/debug-tools

===========================================================================================================

					1. Design specifics

===========================================================================================================

• Synthesis should be done using Vivado 2019.2 or newer. For newer versions
  the MIG and SGMII projects may need to be updated.

• The DDR4 controller is implemented with Xilinx MIG 7-Series and 
  runs of the 300 MHz clock. The DDR4 memory runs at 1200 MHz
  (DDR4-2400).

• The AHB clock(100MHz) is generated by the MMCM module in the DDR4
  controller, and can be controlled via Vivado. When the 
  MIG DDR4 controller isn't present the AHB clock is generated
  from CLKGEN, and can be controlled via xconfig

• System reset is mapped to the CPU RESET button

• DSU break is mapped to GPIO_SW_N button(SW10).

• All user LEDs on VCU118 board are Active High LEDs.

• LED 0 indicates rstn signal level.

• LED 1 indicates the clock lock signal level. 
  This signal indicates:
	MIG present: DDR4 MIG calibration done signal status.
	MIG not present: Status of clklock signal from clock generator.

• LED 2 indicates dsu_en signal status. Hardcoded as '1' n this design.

• LED 3 indicates dsu_sel signal status. dsu_sel signal depends on the configuration of position 4 on the SW12. 
  The AHB UART can be enabled by setting position 4 of SW12, to 'ON'.
  Since the board is equipped with one USB/RS232 connector, 
  APB UART and  AHB UART cannot be used at the same time.

• The application UART is connected to the USB/RS232 connector if 
  position 4, located on the DIP Switch SW12 of the board, is set to OFF.

• LED 4 indicates dsubreak signal status.

• LED 5 indicates processor error mode status

• The JTAG DSU interface is enabled and accesible via the JTAG port.

• 1G Ethernet interface is realized by instantiating SGMII xilinx IP with Async
  LVDS SelectIO configuration. Megabit or Gigabit ethernet MAC is instantiation in the design
  is configurable based on the value of 'CFG_GRETH1G' in config.vhd
===========================================================================================================

					2. PREREQUISITE

===========================================================================================================

As <selene hw repo>/interconnect/axi and <selene hw repo>/interconnect/common\_cells are submodule, 
the SELENE hardware repository needs to be cloned recursively.
As a preparation step to synchronize and update the submodules, the following git commands can be executed 
from toplevel of the working tree, in SELENE hardware repository.

	git submodule sync --recursive
	git submodule update --init --recursive

===========================================================================================================

					3. SIMULATION

===========================================================================================================
To simulate using Questasim use different make targets, in specific order, in the project folder(selene-xilinx-vcu118)

1. Default
-------------
  make map_xilinx_7series_lib
  make selene-sim
  make sim-launch
The above steps simulates the default configuration of the SoC. The simulation flow will not compile the
Xilinx MIG IP or SGMII IP. The default memory simulated will be either an aximem or an ahbram_sim. 
The different memories instantiated with simulation options are described in section 'GENERAL NOTES-> 1. Memory'
in further part of this README file.

2. SGMII IP simulation
------------------------------------
If you want to simulate the sgmii xilinx IP, uncomment the line 'SIM_SGMII=y' in Makefile. 
After that, in order to compile SGMII xilinx IP and simulate, please use the following steps.

  make map_xilinx_7series_lib
  make selene-sim
  make comp_sgmii        
  make sim-launch

3. MIG IP + memory model simulation
------------------------------------
If you want to simulate the MIG xilinx IP, Comment out the line 'CONFIG_MIG_7SERIES_MODEL=y' in Makefile. 
This disables the generation of aximem/ahbram_sim(memory simulation model from Cobham Gaisler) 
and generates the MIG interface in the SoC simulation.

Now,the user must compile the DDR4 memory simulation model from Micron Technologies. 
Perform the following steps to compile it to a library:

	a. On the webpage https://www.micron.com/products/dram/ddr4-sdram/part-catalog/mt40a2g4trf-093e , 
	   navigate to 'Simulation Models' section and download DDR4 SDRAM Verilog Model.
	b. Extract the contents to a local directoty.
	c. Navigate to 'protected_modelsim' folder in the extracted contents.
	d. Compile the libraries by executing the compilation steps in(vlib and vlog commands. 
	   No need to execute the testbench)modelsim.do the library will be compiled in to the 'work' folder.
	e. Copy the 'work' folder to <selene_repo>/selene_soc/selene-xilinx-vcu118 folder and change 
	   the copied folder name from 'work' to 'mem_model'
  
After that, in order to compile MIG xilinx IP and simulate, please use the following steps in 
<selene_repo>/selene_soc/selene-xilinx-vcu118 folder.

  make map_xilinx_7series_lib
  make selene-sim
  make comp_mig       
  make sim-launch

If you have made any grlib script level modifications, always perform 'make distclean' 
to bring the directory to a clean state, before executing the above commands.

===========================================================================================================

					4. BITSTREAM GENERATION

===========================================================================================================
The synthesys flow will include the HLSinf accelerator instance by default. (This accelerator is not included in simulation flow.)
If HLSinf accelerator is not needed, the synthesys time can be improved by simply switching the CFG_HLSINF_EN label to '0' located at config.vhd file.


To run synthesys and P&R:

 make selene-vivado

   or, to run through the GUI:
 make selene-vivado-launch

----------------------------------------------------------

Bitstream with GPL only IP cores are located at : <selene_repo>/selene_soc/selene-xilinx-vcu118/bitfiles/gpl/
Bitstream with GPL + non GPL IP cores are located at : <selene_repo>/selene_soc/selene-xilinx-vcu118/bitfiles/non-gpl/

----------------------------------------------------------
To program the FPGA with the bitsteam in the 'bitfiles' folder:

 make prog-fpga

To program the QSPI flash with the bitsteam in the 'bitfiles' folder:

 make prog-flash

Note : While performing both 'make prog-fpga' and 'make prog-flash', please make sure that the switch SW16 positions 1,2,3,4 are configured as 0,1,0,1 (JTAG mode) 
After successfully programming the flash, to configure the FPGA to boot from SPI flash, you need to change switch SW16 positions 1,2,3,4 to 0,0,0,1 (Master SPI mode)
and powercycle the board. If the board is configured in Master SPI mode, the digilent(JTAG) debug link will not be available for grmon connection. 
Only UART and EDCL debug links will be available in Master SPI mode.

===========================================================================================================

					DEBUGGING DESIGN

===========================================================================================================

To connect to the design using GRMON:

AHB JTAG
---------

 grmon -u -digilent
You need to have necessary digilent drivers installed on your computer. Please refer grmon3.pdf

AHB UART
---------
* Configure the position 4 on the SW12 as 'ON' on the VCU118 board.

 grmon -u -uart /dev/ttyUSBX
Where X is the UART device attached to your PC when the USBA-microB cable is connected between the board and PC.
Please select the second UART device in the list. Of the two serial ports detected on the PC, one is connected 
to the system controller and the other is connected to the xcvu9p FPGA. User must select the UART connected to xcvu9p FPGA.

EDCL
---------
Because of the MDIO writes needed to bring up the ethernet interface, at present user need to source 
'eth_config.tcl' in GRMON, initially using any other debug link and then reconnect with edcl ip 192.168.0.51


grmon -u -uart /dev/ttyUSBX -c eth_config.tcl
grmon -u -eth 192.168.0.51

There are two ways to have the HW set up for EDCL connection.

  1. VCU118 board connected to LAN
  ---------------------------------
You can connect the VCU118 board to the Local Area Network using an ethernet cable. Assuming that your PC is also connected to the LAN, 
you can connect to the board using any unique IP address assigned to the board. The default EDCL IP address configured in the HW is 192.168.0.51. 
You can change this to any unique IP address by editing the eth_config.tcl. 

The command is edcl <Unique IP address>.

  2. Private Ethernet network
  ---------------------------------
If you do not want to connect the VCU118 board to the LAN, you can have a private ethernet network with your PC and VCU118 board. 
It is mandatory that the network configuration of your PC should be matching that od the ethernet controller on the VCU118 board. 
Please see the example below.

a. I have an additional network card on my PC. 
 
[krishna@krishna selene-xilinx-vcu118]$ nmcli d
DEVICE       TYPE      STATE      CONNECTION  
enp1s0       ethernet  connected  enp1s0      
virbr0       bridge    connected  virbr0      
enp0s20f0u4  ethernet  connected  enp0s20f0u4 

b. The network card is configured such that the device enp0s20f0u4 is on a different sub net than the LAN.

[krishna@krishna selene-xilinx-vcu118]$ ifconfig 
enp0s20f0u4: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 192.168.100.51  netmask 255.255.255.0  broadcast 192.168.100.255
        ether 00:e0:4c:68:05:f6  txqueuelen 1000  (Ethernet)
        RX packets 160730  bytes 9645384 (9.1 MiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 164892  bytes 51130794 (48.7 MiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

	.
	.
	.

c. eth_config.tcl is modified to have the EDCL IP address on the VCU118 board as 192.168.100.237
	edcl 192.168.100.237

d. Source eth_config.tcl for MDIO writes and EDCL IP modification.
	grmon -u -uart /dev/ttyUSBX -c eth_config.tcl

e. Establish the grmon connection over EDCL

[krishna@krishna selene-xilinx-vcu118]$ GRMON3 -u -eth 192.168.100.237

  GRMON debug monitor v3.2.7-46-g61d2e26 64-bit internal version
  
  Copyright (C) 2020 Cobham Gaisler - All rights reserved.
  For latest updates, go to http://www.gaisler.com/
  Comments or bug-reports to support@gaisler.com
  
  This internal version will expire on 12/10/2021

Parsing -u
Parsing -eth 192.168.100.237

Commands missing help:

 Ethernet startup...
  GRLIB build version: 4257
  Detected frequency:  100.0 MHz
  
  Component                            Vendor
  NOEL-V RISC-V Processor              Cobham Gaisler
  GR Ethernet MAC                      Cobham Gaisler
  GRSPW2 SpaceWire Serial Link         Cobham Gaisler
  GRSPW2 SpaceWire Serial Link         Cobham Gaisler
  GRSPW2 SpaceWire Serial Link         Cobham Gaisler
  GRSPW2 SpaceWire Serial Link         Cobham Gaisler
  AHB Debug UART                       Cobham Gaisler
  JTAG Debug Link                      Cobham Gaisler
  EDCL master interface                Cobham Gaisler
  L2-Cache Controller                  Cobham Gaisler
  Generic AHB ROM                      Cobham Gaisler
  Xilinx MIG Controller                Cobham Gaisler
  AHB/APB Bridge                       Cobham Gaisler
  RISC-V CLINT                         Cobham Gaisler
  RISC-V PLIC                          Cobham Gaisler
  RISC-V Debug Module                  Cobham Gaisler
  AMBA Trace Buffer                    Cobham Gaisler
  AHB Status Register                  Cobham Gaisler
  General Purpose I/O port             Cobham Gaisler
  Generic UART                         Cobham Gaisler
  Version and Revision Register        Cobham Gaisler
  Modular Timer Unit                   Cobham Gaisler
  
  Use command 'info sys' to print a detailed report of attached cores

grmon3> 

===========================================================================================================

					6. Listing the details of SELENE-specific cores 

===========================================================================================================

SELENE SoC includes a small-footprint ROM that stores HW configuration of those SELENE cores that are not listed by “info sys” GRMON command. 
ROM is connected to the SOC via the AXI4-lite interface, and mapped onto the address 0xFFFC0700. 
HWInfo ROM contains 16 descriptors of the SELENE SoC cores, attending to the following format (64 bits per descriptor):

    | XXXX XXXX    XXXX XX      X        X         X    |
    | ---------    -------    ------   ------    ------ |
    | 32 bits      20 bits    4 bits   4 bits    4 bits |
    | ---------    -------    ------   ------    ------ |
    | Core Base      Core      Core     Core      Core  |
    | Address      Features     ID     Version    Type  |
    

Currently used device-IDs:
    |---------------------------------|
    | Core ID     Core description    |
    |---------------------------------|
    |   0:      HLS accelerator       |
    |   1-4:    RootVoters            |
    |   5:      SafeSu                |
    |   6-15:   Not used              |
    |---------------------------------|
                                  
Currently defined Device Types:
    |---------------------------------|
    | Core Type   Core description    |
    |---------------------------------|
    |   0:      Reserved for void slot|
    |   1:      HLS accelerator       |
    |   2:      RootVoter             |
    |   3:      SafeSU                |
    |   4-15:   Currently not used    |
    |---------------------------------|


When using GRMON this WH info can be parsed and listed in two ways:

1. Using info_selene command:

    1.1.  Run GRMON with the selene_defs.tcl on the input:
            > grmon -u -uart /dev/ttyUSB1 -c selene_defs.tcl
            Alternatively load this TCL file at runtime:
            > source selene_defs.tcl

    1.2. Use info_selene command (instead of info sys) to list the detailed HW info for all SoC components 
        (including SELENE-specific cores)
   
   
2. Using custom device driver:
    2.1. Run GRMON as follows:
    > grmon -u -uart /dev/ttyUSB1 -udrv selene_drv.tcl
    
    2.2. Use "info sys" command (as usual)

In both cases HWInfo of SELENE cores will be printed to the terminal attending to following format:    
     
grmon3> info_selene
    OR
grmon3> info sys
    .......................... ..........................
  Device at ADR: 0xfffc0000
    ID:      0
    Type:    HLSinf Accelerator core
    Version: 10
    Features: U200, 4x4, FP32: DIRECT_CONV, RELU, STM, CLIPPING, POOLING, BATCH_NORM, ADD, UPSIZE
  Device at ADR: 0xfffc0100
    ID:      1
    Type:    RootVoter
    Version: 2
    Max Datasets:             9
    Detection of Data Errors: 1
    Tracking of Match Pairs:  0
    Count Matches:            1
  Device at ADR: 0xfffc0200
    ID:      2
    Type:    RootVoter
    Version: 2
    Max Datasets:             9
    Detection of Data Errors: 1
    Tracking of Match Pairs:  0
    Count Matches:            1
  Device at ADR: 0xfffc0300
    ID:      3
    Type:    RootVoter
    Version: 2
    Max Datasets:             9
    Detection of Data Errors: 1
    Tracking of Match Pairs:  0
    Count Matches:            1
  Device at ADR: 0xfffc0400
    ID:      4
    Type:    RootVoter
    Version: 2
    Max Datasets:             9
    Detection of Data Errors: 1
    Tracking of Match Pairs:  0
    Count Matches:            1

  

NOTE: for the old bitstreams (without HWInfo ROM) the output in both cases will be:
 "HWInfo ROM not present in this SoC"

===========================================================================================================

					7. GENERAL NOTES

===========================================================================================================

1. Memory
***********
This section describes memories generated in the design with different simulation/sysnthesis configurations.

  In simulation
--------------------

  AXI memory 
  ----------
* If the line 'CONFIG_MIG_7SERIES_MODEL=y' is uncommented in the project Makfile,'CFG_MIG_7SERIES' is set 
to value 1 in config.vhd and the default simulation steps are executed, an AXI memory model(aximem) will be 
generated in simulation. This will be connected to the L2C/ahb2axib bridge backend.

  MIG + Micron DDR4
  -----------------
* If the line 'CONFIG_MIG_7SERIES_MODEL=y' is commented out in the project Makfile,'CFG_MIG_7SERIES' is set 
to value 1 in config.vhd and the 'MIG IP + memory model simulation' steps are executed, MIG xilinx IP and 
Micron DDR4_IF interface memory model will be generated in simulation. 
MIG will interface the Micron DDR4 to the L2C/ahb2axib bridge backend.

  AHBRAM
  -------
* If the line 'CONFIG_MIG_7SERIES_MODEL=y' is uncommented in the project Makfile,'CFG_MIG_7SERIES' is set 
to value 0 in config.vhd and the default simulation steps are executed, an AHBRAM memory model(ahbram_sim)
will be generated in simulation. This will be connected to the processor AHB bus as a slave.
The signals to the L2C/ahb2axib bridge backend will be tied to zero in this case.

  In synthesis
--------------------

  MIG 
  ----
* If 'CFG_MIG_7SERIES' is set to value 1 in config.vhd, an MIG will be generated in synthesis. 
This will be connected to the L2C/ahb2axib bridge backend.


  AHBRAM
  -------
* If 'CFG_MIG_7SERIES' is set to value 0 in config.vhd, an AHBRAM memory(ahbram)
will be generated in simulation. This will be connected to the processor AHB bus as a slave.
The signals to the L2C/ahb2axib bridge backend will be tied to zero in this case.

2. Linux 
***********
User can download pre-built Linux image from Cobham Gaisler web page https://www.gaisler.com/index.php/products/sw-noel-overview
Download ' Sample Linux image (SMP, networking, login as root) for NOEL-V RV32IMA and RV64IMA (md5)' from the above mentioned page.
You can use ' noel64-linux-image' from the .zip file.

User nead to load corresponding DTB in grmon for successful Linux boot as well.
Download 'NOEL-XCKU DTS/DTB files (HW description needed by OS)' from https://www.gaisler.com/index.php/products/processors/noel-v-examples/noel-xcku
Since SELENE is a 4 core system, please use 'noel-xcku-ex4.dtb' from the extracted folder from .zip file.

The command format to load and run Linux in GRMON is as follows:

	grmon3> load noel64-linux-image
	grmon3> dtb noel-xcku-dts_dtb-20210208/noel-xcku-ex4.dtb
	grmon3> run

Here is the instructions if you are booting the linux image which is part of the SDK created by Cobham Gaisler:
------------------------------------------------------------------------------------------------------------------------

download links:

  https://gaisler.com/tmp/selene/selene-linux-sdk-20210923.tar.gz

  https://gaisler.com/tmp/selene/selene-linux-sdk-20210923.md5

1. Download the SDK package from the above link and extract the contents. 

2. Program the FPGA with the bitstream from <selene_repo>/selene_soc/selene-xilinx-vcu118/bitfiles/ (either in non-gpl/ or gpl/ folders according to your wishes)

3. Connect to the SoC using the digilent or uart grmon debug link and issue the command : 

	• source <selene_repo>/selene_soc/selene-xilinx-vcu118/eth_config.tcl

4. Connect again to the SoC using digilent or uart grmon debug link and set the unique EDCL ip(you can edit the eth_config.tcl and add the edcl ip assignment command in the tcl script as well Then step 3 will cover EDCL ip assignment)
5. Connect to SoC using EDCL. Command format

    	• grmon -eth 192.168.0.X

6. Issue the following command in grmon to boot linux

	• grmon3> forward enable uart2
        Note: Instead of the 'forward enable uart2' command, you can otherwise connect to grmon with '-u 2' flag, for example grmon -u 2 -eth 192.168.0.X

        a. Then, if you are testing non-gpl bitstream:

		• grmon3> dtb <selene_repo>/selene_soc/selene-xilinx-vcu118/bitfiles/non-gpl/noel-selene-4CPUs_nfsroot_non-gpl.dtb

        b. Elif you are testing gpl bitstream, which has been generated from commit 1bfa339 but with the add of a second MIG:

		• grmon3> cpu disable 1;cpu disable 2;cpu disable 3;
	        • grmon3> dtb <selene_repo>/selene_soc/selene-xilinx-vcu118/bitfiles/gpl/noel-selene-4CPUs_nfsroot_gpl.dtb

	• grmon3> load selene-linux-sdk-20210611/linux-image.elf

	• grmon3> run

Please note that you need to ensure that you need to generate dtb files from the specified dts files. And please make sure that you have a unique IP address, local-mac-address for greth controller and correct NFS server details in the DTS file, to get the linux boot correctly. An example linux boot log is placed at <selene_repo>/selene_soc/selene-xilinx-vcu118/bitfiles/non-gpl/ for your reference.

Command format to create DTB file :

	dtc file_name.dts > file_name.dtb
Nota bene: the dts files of the previous dtb files (step 6.a. and 6.b.) are located in the same folders (non-gpl/ and gpl/)



	


