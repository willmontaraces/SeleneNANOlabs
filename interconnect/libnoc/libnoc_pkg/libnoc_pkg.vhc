--MIT License
--
--Copyright (c) 2021 UPV 
--
--Permission is hereby granted, free of charge, to any person obtaining a copy
--of this software and associated documentation files (the "Software"), to deal
--in the Software without restriction, including without limitation the rights
--to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
--copies of the Software, and to permit persons to whom the Software is
--furnished to do so, subject to the following conditions:
--
--The above copyright notice and this permission notice shall be included in all
--copies or substantial portions of the Software.
--
--THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
--IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
--FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
--AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
--LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
--OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
--SOFTWARE.

#include "../../autogeneratedWarning.vhc"

library ieee;
use ieee.std_logic_1164.all;
use ieee.math_real.all;

library grlib;
use grlib.config.all;

package libnoc_pkg is
  constant MaxMstTrans : integer := 32; 
  constant MaxSlvTrans : integer := 32; 
  constant FallThrough : std_logic := '0'; 
  constant LatencyMode : std_logic_vector(9 downto 0) := "0000000000"; --Not used overwritten by xbar_wrapper.sv
  constant AxiIdWidthSlvPorts : integer := 4-integer(ceil(log2(real(CFG_AXI_N_INITIATORS)))); 
  constant AxiIdUsedSlvPorts  : integer := 1;	
  constant AxiAddrWidth       : integer := 32;
  constant AxiDataWidth       : integer := 128;
  constant AxiMaxDataWidth    : integer := 512;
  constant NoAddrRules        : integer := 1;	

  -- some more constant declaration for needed typedefs
  constant AxiIdWidthMasters : integer :=  4; --AxiIdWidthSlvPorts + log2(NoSlvPorts)
  constant AxiIdUsed         : integer :=  AxiIdWidthSlvPorts; -- Has to be <= AxiIdWidthMasters
  constant AxiIdWidthSlaves  : integer :=  AxiIdWidthSlvPorts; --AxiIdWidthMasters + integer(ceil(ieee.math_real.log2(real(CFG_AXI_N_INITIATORS))));
  constant AxiStrbWidth      : integer :=  AxiDataWidth/8; --AxiDataWidth / 8;
  constant AxiMaxStrbWidth   : integer :=  AxiMaxDataWidth/8; --AxiDataWidth / 8;
  constant AxiUserWidth      : integer :=  3;
end package;
